import org.codehaus.groovy.ast.ASTNode
import org.codehaus.groovy.ast.CodeVisitorSupport
import org.codehaus.groovy.ast.builder.AstBuilder
import org.codehaus.groovy.ast.expr.ArgumentListExpression
import org.codehaus.groovy.ast.expr.MethodCallExpression

import java.nio.file.Files

/**
 * THIS FILE IS AUTO-GENERATED BY THE IHMC BUILD GRADLE PLUGIN
 * To disable auto-generation, set "disableSettingsGeneration = false"
 * in the gradle.properties file.
 */

rootProject.name = hyphenatedName

println "Evaluating " + pascalCasedName + " settings.gradle"

Eval.me(extraSourceSets).each {
   new File(rootProject.projectDir, it).mkdir()
   include it
   project(":" + it).name = hyphenatedName + "-" + it
}

println(rootProject.buildFile)

try
{
   AstBuilder builder = new AstBuilder();
   List<ASTNode> nodes = builder.buildFromString(new String(Files.readAllBytes(rootProject.buildFile.toPath())));
   def visitor = new ParseGradleFileVisitor()
   for (ASTNode node : nodes)
   {
      node.visit(visitor);
   }
}
catch (IOException e)
{
   println(e.getMessage())
}

public class ParseGradleFileVisitor extends CodeVisitorSupport
{
   @Override
   public void visitMethodCallExpression(MethodCallExpression call)
   {
      println(call.toString())
      //your logic code
   }

   @Override
   public void visitArgumentlistExpression(ArgumentListExpression ale)
   {
      println(ale.toString())
      //your logic code
   }
}
